library(shiny)
library(ggplot2)
library(dplyr)

# UI 
ui <- fluidPage(
  
  # Sidebar layout with a input and output definitions 
  sidebarLayout(
    
    # Inputs
    sidebarPanel(
      
      # Select variable for x-axis
      selectInput(inputId = "x", 
                  label = "X-axis:",
                  choices = names(iris)[-5], # Select column names except for Species(column 5)
                  selected = "Sepal.Length"),
      
      # Choose a speicies
      selectInput(inputId = "species", 
                  label = "Select species",
                  choices = c(as.character(unique(iris$Species)), "all"), 
                  selected = "setosa", multiple = TRUE),
      
      # Number of Bins - Slider
      sliderInput(inputId = 'nBins',
                  label = 'Number of Bins',
                  min = 5,
                  max = 25,
                  value = 5, step = 1)
      
    ),
    
    # Outputs
    mainPanel(
      plotOutput(outputId = "hist")
    )
  )
)

# Define server function required to create the histogram
server <- function(input, output) {
  
  observe(print(input$species))
  
  # Reactive data
  # depends on input$species, so wrap in reactive()
  dat <- reactive({
    if (!input$species %in% "all")
    {
    iris %>% filter(Species %in% input$species)
    } else {
      iris
    }
  })
  
  # Create a histogram object the plotOutput function is expecting
  output$hist <- renderPlot({

    p <- ggplot(data = dat(), aes_string(x = input$x)) +
      geom_histogram(bins = input$nBins, color = 'black', fill = 'purple') +
      labs(title = paste("Histogram of", input$species, 'and', input$x))
    
    p
    
  })
}

# Create a Shiny app object
shinyApp(ui = ui, server = server)
