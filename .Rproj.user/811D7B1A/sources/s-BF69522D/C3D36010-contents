---
title: "Proposal Appendix: GEObridge Demo"
author: "Yue Fang"
date: "10/25/2022"
output: 
  pdf_document:
    includes:
      in_header: header.tex
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# 1. Introduction

This is the demo for the proposal of the **GEObridge** R package. The goal of the proposal and literature review are provided in the proposal document. 
In this demo, we will use three examples to demostrate the utility and feasibility of the proposed R package. The proposed GEObridge package will 
use several functions from GEOmetadb package to query the full meta information from the GEO database. Then, we will illustrate the important of 
the proposed R package by showing the below three examples. The three examples also serve as the tutorial which will be included in the manual of the
R package and official website of the package.

# 2. Preliminary 

The proposed GEObridge is to design and provide the down stream functions for the GEOmetadb package. Firstly, we will show how to install GEOmetadb package. Then, we will show the seven table which contains the most meta information we need thereafter.

Note, GEOmetadb pacakge is not publised on the CRAN. Thus, we cannot use *install.package()* function to install this package. Instead, we need to install the package from Bioconductor, which is a platform of open source software for bioinformatics. 


```{r, include=TRUE, eval=FALSE}
# Install BiocManager to install GEOmetadb package if you don't have use any 
# Bioconductor package before.
if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

# Install the dependent package GEOmetadb
BiocManager::install("GEOmetadb")

```

The download and uncompress steps are done automatically with a single command, *getSQLiteFile*. This production SQLite database is huge.

```{r, include=TRUE, eval=FALSE}
if( !file.exists("GEOmetadb.sqlite") ) {
  demo_sqlfile <- getSQLiteFile(destdir = getwd(), destfile = "GEOmetadb.sqlite.gz")
} else {
  demo_sqlfile <- "GEOmetadb.sqlite"
}
```


The Structured Query Language, or SQL, is a very powerful and standard way of working with relational data. GEO is composed of several data types, all of which are related to each other; in fact, NCBI uses a relational SQL database for metadata storage and querying. SQL databases and SQL itself are designed specifically to work efficiently with just such data. 

In simple words, SQL is the language to use special table which can store a lot of information. This special table has very high efficient during the input and output (store and query) process. 


Now, the SQLite file is available for connection. The standard DBI functionality as implemented in RSQLite function dbConnect makes the connection to the database. The dbDisconnect function disconnects the connection.
```{r, include=TRUE, eval=TRUE}
library(GEOmetadb)
library(DBI)
con = dbConnect(SQLite(), "GEOmetadb.sqlite")
# remove this connection after all work to keep workspace clean
#dbDisconnect(con) 
```

## 2.1 Check All Meta Data in Downloaded SQLite File

We already know the downloaded SQLite file is huge due to it contains all the meta data of GEO and stored it as high efficient tables. We will print all different tables in SQLite. In total, there are 11 tables stored in this file. Each table contains different meta information. For example, table **gse** contains all the GES ID for each datase and related meta information.

```{r, include=TRUE, eval=TRUE}
TotalTable <- dbListTables(con)
print(TotalTable)
```

We can print the detailed meta information in **gse** table using below code.
```{r, include=TRUE, eval=TRUE}
dbListFields(con,'gse')
```




# 3. Code Example

The below demos shows the part of the work pipeline. However, we have not wrapped the work flow pipeline into the function yet. In the R package version, the below work flow will be present in the several independent R function with pre-defined parameters.

## 3.1 Demo 1: Search Cancer-Specific Datasets with Keyword ‘breast’ in Homo Sapiens

To enable the searching function in GEObridge, we need to save the GSE table into current workspace. Here, we just extract top 100,000 datasets to save time.


```{r, include=TRUE, eval=TRUE}
gse_database0 = dbGetQuery(con, 'select * from gse limit 80000')
gse_database = gse_database0[,c('title', 'gse', 'summary', 'type', 'overall_design')]	
dim(gse_database)
```

Here, we only interested in the Bulk RNA-seq or single cell RNA-seq data by using the platform (type) information.

```{r, include=TRUE, eval=TRUE}
counts = apply(gse_database, MARGIN=1, 
               function(x)(grep("Expression profiling by high throughput sequencing", x)))
gse_database_RNAseq = gse_database[which(sapply(counts, length)>0),]
gse_database_RNAseq_unique =  gse_database_RNAseq[which(gse_database_RNAseq[,'type']
                                =="Expression profiling by high throughput sequencing"),]
dim(gse_database_RNAseq_unique)
```

Within the selected RNA-seq data, we start to search the cancer keyword 'breast'. We also print the total number of datasets we already found and the detailed access GSE ID.

```{r, include=TRUE, eval=TRUE}
counts = apply(gse_database_RNAseq_unique , MARGIN=1, function(x)(grep("breast",tolower(x))))
breast = gse_database_RNAseq_unique[which(sapply(counts, length)>0),]
length(breast$gse)
```

Within the selected RNA-seq data, we start to search the cancer keyword 'tumor'.

```{r, include=TRUE, eval=TRUE}
counts = apply(gse_database_RNAseq_unique , MARGIN=1, function(x)(grep("tumor",tolower(x))))
tumor = gse_database_RNAseq_unique[which(sapply(counts, length)>0),]
length(tumor$gse)
```


Since some authros may use word 'cancer' insread of 'tumor' in the paper. Within the selected RNA-seq data, we start to search the cancer keyword 'cancer'.

```{r, include=TRUE, eval=TRUE}
counts = apply(gse_database_RNAseq_unique , MARGIN=1, function(x)(grep("cancer",tolower(x))))
cancer = gse_database_RNAseq_unique[which(sapply(counts, length)>0),]
length(cancer$gse)
```

Finally, we need to do some set operation. We firstly merge the result of cancer searching and tumor search. Then, we find the intersect of breast and the merged set in last step.

```{r, include=TRUE, eval=TRUE}
merge = c(tumor$gse, tumor$gse)
breast_cancer = intersect(merge, breast$gse)
length(breast_cancer)
print(breast_cancer)
```

The user then can download these dataset using the access GSE ID in the GEO database and perform the different bioinformatics analysis.


## 3.2 Demo 2: Summarize and Compare the Number of Dataset using Different Platform

In the downloaded meta data, we can summary all the platfrom collected in the GEO database and print top frequent platform in order. In the first 100,000 dataset, there are total 607 different platforms collected in the database. We only print the top 10 popular platforms here.

```{r, include=TRUE, eval=TRUE}
length(sort(table(gse_database$type),decreasing=T))
top10platform = sort(table(gse_database$type),decreasing=T)[1:10]
print(top10platform)
```

## 3.3 Demo 3: Visualize the Result of Datasets 

```{r, include=TRUE, eval=TRUE}
df = data.frame(platform = names(top10platform), Freq = as.numeric(top10platform))

library(ggplot2)
p<-ggplot(df, aes(x=platform, y=Freq, fill=platform)) +
  geom_bar(stat="identity")+
  ggtitle('Compare the Platform across the Downloaded Datasets') +
  theme(axis.text.x=element_blank()) 
p
```


We can also extract sample information from another table, named 'gse_gsm'

```{r, include=TRUE, eval=TRUE}

gse_gsm = dbGetQuery(con, 'select * from gse_gsm limit 50000')

n_sample1 = length(which(gse_gsm$gse == 'GSE2100'))
n_sample2 = length(which(gse_gsm$gse == 'GSE2270'))
n_sample3 = length(which(gse_gsm$gse == 'GSE2283'))


df = data.frame(dataID = c('GSE2100','GSE2270','GSE2283'), 
                Sample_Number = c(n_sample1, n_sample2, n_sample3))

library(ggplot2)
p<-ggplot(df, aes(x=dataID, y=Sample_Number)) +
  geom_bar(stat="identity", width=0.5)+
  ggtitle('Compare the Number of Samples') + 
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.margin = margin(0, 2, 0, 2, "cm"),) 
p
```

## 3.4 R environment

During the package development, I searched multiple github issues and respositories. Most professional software development engineers suggest to list the R environment if you ask a question or request the help for debug. The R environment will provide a comprehensive list which also help other people reproduce the result or bug.

```{r, include=TRUE, eval=TRUE}
sessionInfo()
```



