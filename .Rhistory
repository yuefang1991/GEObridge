install.packages("shiny")
library(shiny)
library(ggplot2)
library(dplyr)
runApp('~/Documents/work/yue_proposal_work/shinyExample/shinyexample/shinyExample05.R')
install.packages("miniUI")
library(shiny)
library(miniUI)
library(ggplot2)
# install.packages("shiny")
# install.packages("miniUI")
# install.packages("ggplot2")
library(shiny)
library(gapminder)
outlier_rm(gapminder, "lifeExp", "gdpPercap")
outlier_rm <- function(data, xvar, yvar) {
ui <- miniPage(
gadgetTitleBar("Drag to select points"),
miniContentPanel(
# The brush="brush" argument means we can listen for
# brush events on the plot using input$brush.
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
# Render the plot
output$plot <- renderPlot({
# Plot the data with x/y vars indicated by the caller.
ggplot(data, aes_string(xvar, yvar)) + geom_point()
})
# Handle the Done button being pressed.
observeEvent(input$done, {
# create id for data
data$id <- 1:nrow(data)
# Return the brushed points. See ?shiny::brushedPoints.
p <- brushedPoints(data, input$brush)
# create vector of ids that match brushed points and data
g <- which(p$id %in% data$id)
# return a subset of the original data without brushed points
stopApp(data[-g,])
})
}
runGadget(ui, server)
}
# run to open plot viewer
# click and drag to brush
# press done return a subset of the original data without brushed points
# install.packages("gapminder")
library(gapminder)
install.packages("gapminder")
# run to open plot viewer
# click and drag to brush
# press done return a subset of the original data without brushed points
# install.packages("gapminder")
library(gapminder)
outlier_rm(gapminder, "lifeExp", "gdpPercap")
library(roxygen2)
install.packages('roxygen2')
library(roxygen2)
install.packages("plyr")
library(GEOmetadb)
con = dbConnect(SQLite(), "GEOmetadb.sqlite")
getwd()
dbListTables(con)
getwd()
if( !file.exists("GEOmetadb.sqlite") ) {
demo_sqlfile <- getSQLiteFile(destdir = getwd(), destfile = "GEOmetadb.sqlite.gz", type = 'demo')
} else {
demo_sqlfile <- "GEOmetadb.sqlite"
}
getSQLiteFile(destdir = getwd(), destfile = "GEOmetadb.sqlite.gz")
library(GEOmetadb)
demo_sqlfile <- getSQLiteFile(destdir = getwd(), destfile = "GEOmetadb.sqlite.gz", type = "demo")
demo_sqlfile <- getSQLiteFile(destdir = getwd(), destfile = "GEOmetadb.sqlite.gz")
demo_sqlfile <- getSQLiteFile(destdir = getwd(), destfile = "GEOmetadb.sqlite.gz", type='full')
getSQLiteFile(destdir = getwd(), destfile = "GEOmetadb.sqlite.gz", type = "demo")
citation("GEOmetadb")
getSQLiteFile
update_getSQLiteFile <- function(destdir=getwd(),destfile='GEOmetadb.sqlite.gz',type='full') {
localfile <- file.path(destdir,destfile)
if(type == 'full') {
url_geo = "https://gbnci.cancer.gov/geo/GEOmetadb.sqlite.gz"
} else {
url_geo = "https://gbnci.cancer.gov/geo/GEOmetadb_demo.sqlite.gz"
}
download.file(url_geo, destfile=localfile,mode='wb')
cat('Unzipping...\n')
gunzip(localfile,overwrite=TRUE)
unzippedlocalfile <- gsub('[.]gz$','',localfile)
con <- dbConnect(SQLite(),unzippedlocalfile)
dat <- dbGetQuery(con,'select * from metaInfo')
dbDisconnect(con)
cat("Metadata associate with downloaded file:\n")
print(dat)
return(unzippedlocalfile)
}
update_getSQLiteFile(destdir = getwd(), destfile = "GEOmetadb.sqlite.gz", type = 'demo')
con = dbConnect(SQLite(), "GEOmetadb.sqlite")
!file.exists("GEOmetadb.sqlite")
prepare_table <- function(printAllTable=TRUE, subTable='gse'){
# use updated version update_getSQLiteFile func to download new version database
if(!file.exists("GEOmetadb.sqlite")){
update_getSQLiteFile(destdir = getwd(), destfile = "GEOmetadb.sqlite.gz", type = 'demo')
}
# build connection
con = dbConnect(SQLite(), "GEOmetadb.sqlite")
TotalTable <- dbListTables(con)
if(printAllTable == T)
print(TotalTable)
dbListFields(con, subTable)
}
prepare_table(subTable = 'gse')
prepare_table <- function(printAllTable=TRUE, subTable='gse'){
# use updated version update_getSQLiteFile func to download new version database
if(!file.exists("GEOmetadb.sqlite")){
update_getSQLiteFile(destdir = getwd(), destfile = "GEOmetadb.sqlite.gz", type = 'demo')
}
# build connection
con = dbConnect(SQLite(), "GEOmetadb.sqlite")
TotalTable <- dbListTables(con)
if(printAllTable == T){
print('-----ALl tables stored in the database-----')
print(TotalTable)
print('------end------')
}
print('------Print columns for your inputted sub table-----')
dbListFields(con, subTable)
print('------end------')
}
prepare_table(subTable = 'gse')
prepare_table <- function(printAllTable=TRUE, subTable='gse'){
# use updated version update_getSQLiteFile func to download new version database
if(!file.exists("GEOmetadb.sqlite")){
update_getSQLiteFile(destdir = getwd(), destfile = "GEOmetadb.sqlite.gz", type = 'demo')
}
# build connection
con = dbConnect(SQLite(), "GEOmetadb.sqlite")
TotalTable <- dbListTables(con)
if(printAllTable == T){
print('-----ALl tables stored in the database-----')
print(TotalTable)
print('------------')
}
print('------Print columns for your inputted sub table-----')
dbListFields(con, subTable)
print('------------')
}
prepare_table()
prepare_table <- function(printAllTable=TRUE, subTable='gse'){
# use updated version update_getSQLiteFile func to download new version database
if(!file.exists("GEOmetadb.sqlite")){
update_getSQLiteFile(destdir = getwd(), destfile = "GEOmetadb.sqlite.gz", type = 'demo')
}
# build connection
con = dbConnect(SQLite(), "GEOmetadb.sqlite")
TotalTable <- dbListTables(con)
if(printAllTable == T){
print('-----ALl tables stored in the database-----')
print(TotalTable)
#print('------------')
}
print('------Print columns for your inputted sub table-----')
dbListFields(con, subTable)
#print('------------')
}
prepare_table(subTable = 'gse')
limit
limitN=80000
limitN=800
gse_database0 = dbGetQuery(con, 'select * from gse limit limitN')
gse_database0 = dbGetQuery(con, 'select * from gse limit 800')
paste('select * from', subTable, 'limit', limitN, sep = ' ')
subTable
subTable = 'gse'
paste('select * from', subTable, 'limit', limitN, sep = ' ')
search_statement = paste('select * from', subTable, 'limit', limitN, sep = ' ')
gse_database0 = dbGetQuery(con, search_statement)
limitN=2000
search_statement = paste('select * from', subTable, 'limit', limitN, sep = ' ')
gse_database0 = dbGetQuery(con, search_statement)
dim(gse_database)
gse_database = gse_database0[,c('title', 'gse', 'summary', 'type', 'overall_design')]
dim(gse_database)
dim(gse_database)
dim(gse_database)
dim(gse_database)
dim(gse_database)
dim(gse_database)
head(gse_database)
table(gse_database$type)
counts = apply(gse_database , MARGIN=1, function(x)(grep("breast",tolower(x))))
breast = gse_database[which(sapply(counts, length)>0),]
length(breast$gse)
breast$gse
dim(gse_database)
gse_database['GSE100075', ]
head(gse_database)
View(gse_database)
length(counts)
counts
length(breast$gse)
key
key = 'breast'
get(key)
get(key)
key
counts = apply(gse_database , MARGIN=1, function(x)(grep(get(key),tolower(x))))
rm(breast)
key
counts = apply(gse_database , MARGIN=1, function(x)(grep(get(key),tolower(x))))
get(key)
counts = apply(gse_database , MARGIN=1, function(x)(grep(key,tolower(x))))
data_search = gse_database[which(sapply(counts, length)>0),]
length(data_search$gse)
key1='breast
key1='breast'
key2='cancer'
counts = apply(gse_database , MARGIN=1, function(x)(grep(key1,tolower(x))))
data_search1 = gse_database[which(sapply(counts, length)>0),]
length(data_search1$gse)
counts = apply(gse_database , MARGIN=1, function(x)(grep(key2,tolower(x))))
data_search2 = gse_database[which(sapply(counts, length)>0),]
length(data_search2$gse)
data_search_bind = unique(c(data_search1$gse, data_search2$gse))
data_search_bind
data_search_bind = unique(intersect(data_search1$gse, data_search2$gse))
data_search_bind
gse_database[16,]
length(sort(table(gse_database$type),decreasing=T))
length(sort(table(gse_database$type),decreasing=T))
top10platform = sort(table(gse_database$type),decreasing=T)[1:10]
print(top10platform)
print(TotalTable)
TotalTable <- dbListTables(con)
print(TotalTable)
devtools::document()
library(devtools)
install.packages('devtools')
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages('pkgbuild')
install.packages("pkgbuild")
detach("package:cli", unload=TRUE)
detach("cli", unload=TRUE)
sessionInfo()
